<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chi-Chi Simon</title>
    <link>https://JonathanSimon123.github.io/</link>
    <description>Recent content on Chi-Chi Simon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Fri, 18 Jan 2019 10:00:27 +0800</lastBuildDate>
    
	<atom:link href="https://JonathanSimon123.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Virtual Kubelet</title>
      <link>https://JonathanSimon123.github.io/virtual-kubelet/</link>
      <pubDate>Fri, 18 Jan 2019 10:00:27 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/virtual-kubelet/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;快速部署虚拟节点&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>kubernetes面试题目(基础篇一) </title>
      <link>https://JonathanSimon123.github.io/kubernetes%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B8%80/</link>
      <pubDate>Wed, 26 Dec 2018 23:36:34 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/kubernetes%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B8%80/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;基础篇主要面向的初级、中级开发工程师职位，主要考察对k8s本身的理解。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Kube Proxy</title>
      <link>https://JonathanSimon123.github.io/kube-proxy/</link>
      <pubDate>Fri, 21 Dec 2018 15:02:46 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/kube-proxy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;每台机器上都运行一个 kube-proxy 服务，它监听 API server 中 service 和 endpoint 的变化情况，并通过 iptables 等来为服务配置负载均衡（仅支持 TCP 和 UDP）。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://JonathanSimon123.github.io/kubernetes/</link>
      <pubDate>Thu, 20 Dec 2018 20:23:12 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/kubernetes/</guid>
      <description>&lt;h4 id=&#34;kubernetes-简单介绍&#34;&gt;Kubernetes 简单介绍&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;一： Service,Endpoints与Pod的关系&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Pod 的一生</title>
      <link>https://JonathanSimon123.github.io/pod-%E7%9A%84%E4%B8%80%E7%94%9F/</link>
      <pubDate>Thu, 20 Dec 2018 20:05:47 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/pod-%E7%9A%84%E4%B8%80%E7%94%9F/</guid>
      <description>&lt;h4 id=&#34;pod-的阶段-phase&#34;&gt;POD 的阶段（Phase）&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Pod 阶段是对生命周期的一个阶段的概括。他不是一个对 Pod 或者容器层次的状态的详尽结论，也不是一个全面的状态机。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>行为型模式</title>
      <link>https://JonathanSimon123.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 25 Dec 2017 23:33:48 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;中介者模式&#34;&gt;中介者模式&lt;/h4&gt;

&lt;p&gt;中介者模式封装对象之间互交，使依赖变的简单，并且使复杂互交简单化，封装在中介者中。&lt;/p&gt;

&lt;p&gt;例子中的中介者使用单例模式生成中介者。&lt;/p&gt;

&lt;p&gt;中介者的change使用switch判断类型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>结构型模式</title>
      <link>https://JonathanSimon123.github.io/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 25 Dec 2017 23:27:42 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;外观模式&#34;&gt;外观模式&lt;/h4&gt;

&lt;p&gt;API 为facade 模块的外观接口，大部分代码使用此接口简化对facade类的访问。&lt;/p&gt;

&lt;p&gt;facade模块同时暴露了a和b 两个Module 的NewXXX和interface，其它代码如果需要使用细节功能时可以直接调用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>创建者模式</title>
      <link>https://JonathanSimon123.github.io/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 20 Dec 2017 20:23:04 +0800</pubDate>
      
      <guid>https://JonathanSimon123.github.io/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;golang-简单工厂模式&#34;&gt;golang 简单工厂模式&lt;/h4&gt;

&lt;p&gt;go 语言没有构造函数一说，所以一般会定义NewXXX函数来初始化相关类。 NewXXX 函数返回接口时就是简单工厂模式，也就是说Golang的一般推荐做法就是简单工厂。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>